open import Level using (_‚äî_)
open import Function
open import Algebra.FunctionProperties
open import Relation.Binary.PropositionalEquality as PE using (_‚â°_; _‚â¢_)
open import Relation.Nullary using (¬¨_)
open import Relation.Unary as U using (Pred; Universal)
open PE.‚â°-Reasoning

open import Data.Unit using (‚ä§; tt)
open import Data.Product using (‚àÉ; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Vec
  using (foldr; zipWith; map; replicate; tabulate)
  renaming (Vec to BaseVec)

open import LinearAlgebra

import Data.Vec.Properties as BaseVecP
import LinearAlgebra.Matrix.Lemmas as Lemmas

------------------------------------------------------------------------

module LinearAlgebra.Subspace.Properties
  {s} {scalar : Scalar s}
  where

open Scalar scalar
  using ()
  renaming ( Carrier to S ; 0# to s0 ; 1# to s1
           ; _+_ to _s+_ ; _*_ to _s*_ )

------------------------------------------------------------------------

module Any
  {c} (space : VectorSpaceOver scalar c)
  where

  open VectorSpaceOver space
    using ( V ; _+_ ; _*_ ; v0
          ; +-identity
          ; zeroÀ°
          ; zero ≥ )

  open import LinearAlgebra.Subspace space
  import LinearAlgebra.Vec scalar as Vec
  open Vec.Combination space

  import LinearAlgebra.Vec.CombinationProperties space as CombP

  -------------------------------------------------------
  -- The origin is a subspace

  origin-isSubspace : IsSubspace Origin
  origin-isSubspace = record
    { origin = PE.refl
    ; sum = Œª { PE.refl PE.refl ‚Üí PE.sym (proj‚ÇÅ +-identity v0) }
    ; scale = Œª { k PE.refl ‚Üí PE.sym (zero ≥ k) } }

  -------------------------------------------------------
  -- All universal sets are subspaces

  U‚ÜíisSubspace : ‚àÄ {c‚Ä≤} {ùïç : Pred V c‚Ä≤}
    ‚Üí Universal ùïç
    ‚Üí IsSubspace ùïç
  U‚ÜíisSubspace univ = record
    { origin = univ v0
    ; sum = Œª _ _ ‚Üí univ _
    ; scale = Œª _ _ ‚Üí univ _ }

  -------------------------------------------------------
  -- Spans form subspaces

  span-isSubspace : ‚àÄ {n} {vs : BaseVec V n}
    ‚Üí IsSubspace (Span vs)
  span-isSubspace {n} {vs} = record
    { origin =
      PE.subst (Span vs) (CombP.zero-combination vs)
        $ span (replicate s0)
    ; sum = Œª { (span as) (span bs) ‚Üí
      PE.subst (Span vs) (CombP.+-combine as bs vs)
        $ span (zipWith _s+_ as bs) }
    ; scale = Œª { k (span as) ‚Üí
      PE.subst (Span vs) (CombP.*-combine k as vs)
        $ span (map (k s*_) as) } }

------------------------------------------------------------------------

open Any
